@using FoodWasteSalling.Shared.Interfaces;
@using FoodWasteSalling.Shared.Models;
@page "/store/{storeId}"
@inject IOfferService OfferService
@inject NavigationManager Navigation

@if (store is null)
{
	<p>Loading...</p>
}
else
{
	<div class="store-header">
		<h2>@store?.Store?.Name</h2>
		<div class="store-address">
			<p><strong>By:</strong> @store?.Store?.Address?.City</p>
			<p><strong>Postnummer:</strong> @store?.Store?.Address?.Zip</p>
			<p><strong>Adresse:</strong> @store?.Store?.Address?.Street</p>
		</div>
	</div>
}

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	type="text"
	@bind="storeSearch"
	@bind:event="oninput" />
</div>

<div class="sort-buttons-container">
	<span>Sortér efter:</span>
	<button class="sort-button @(selectedSort == "name" ? "active-sort" : "")" @onclick="@(() => SetSort("name"))">Navn (A-Å)</button>
	<button class="sort-button @(selectedSort == "priceAsc" ? "active-sort" : "")" @onclick="@(() => SetSort("priceAsc"))">Pris ↑</button>
	<button class="sort-button @(selectedSort == "priceDesc" ? "active-sort" : "")" @onclick="@(() => SetSort("priceDesc"))">Pris ↓</button>
	<button class="sort-button @(selectedSort == "discount" ? "active-sort" : "")" @onclick="@(() => SetSort("discount"))">Største rabat</button>
	<button class="sort-button @(selectedSort == "discountPercent" ? "active-sort" : "")" @onclick="@(() => SetSort("discountPercent"))">Største rabat %</button>
</div>

<div class="store-clearances">
	@foreach (var product in filteredProducts)
	{
		<button class="product-button" @onclick="() => OpenProductModal(product)">
			<div class="product-offer">
				<div class="product-info">
					<h3 class="product-title">@product?.Product?.Description</h3>
					<p class="original-price"><s>@product?.Offer?.OriginalPrice kr</s></p>
					<p class="new-price">@product?.Offer?.NewPrice kr</p>
					<p class="discount-amount">Spar @product?.Offer?.Discount kr (@product?.Offer?.PercentDiscount%)</p>
				</div>
				<div class="image-container">
					<img class="product-image"
						 src="@((product?.Product?.Image != null) ? product?.Product?.Image : "noimage.png")"
						 alt="Product Image" />
				</div>
			</div>
		</button>
	}

</div>

<ProductModal IsOpen="isModalOpen"
			  Product="selectedProduct"
			  StoreName="@(store?.Store?.Name ?? "")"
			  OnClose="CloseModal" />

@code {
	[Parameter] 
	public string StoreId { get; set; } = null!;

	private EveryFoodWaste store = null!;
	private List<Clearance> filteredProducts = new List<Clearance>();

	private string selectedSort = "name";

	private bool isModalOpen = false;
	private Clearance? selectedProduct = null;

	protected override async Task OnInitializedAsync()
	{
		store = await OfferService.GetStoreByIdAsync(StoreId);
		filteredProducts = new List<Clearance>(store.Clearances);
		foreach (var clearance in store.Clearances)
		{
			clearance?.Product?.SplitCategories();
		}
		SortFilteredProducts();
	}

	private string _storeSearch;
	private string storeSearch
	{
		get => _storeSearch;
		set
		{
			_storeSearch = value;
			FilterStores();
		}
	}

	private void SetSort(string sortType)
	{
		selectedSort = sortType;
		SortFilteredProducts();
	}

	private void SortFilteredProducts()
	{
		switch (selectedSort)
		{
			case "name":
				filteredProducts = filteredProducts
					.OrderBy(p => p?.Product?.Description)
					.ToList();
				break;
			case "priceAsc":
				filteredProducts = filteredProducts
					.OrderBy(p => p?.Offer?.NewPrice)
					.ToList();
				break;
			case "priceDesc":
				filteredProducts = filteredProducts
					.OrderByDescending(p => p?.Offer?.NewPrice)
					.ToList();
				break;
			case "discountPercent":
				filteredProducts = filteredProducts
					.OrderByDescending(p => p?.Offer?.PercentDiscount)
					.ToList();
				break;
			case "discount":
				filteredProducts = filteredProducts.OrderByDescending(p => p?.Offer?.Discount)
				.ToList();
				break;
		}
	}

	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			filteredProducts = new List<Clearance>(store.Clearances);
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();
			filteredProducts = store.Clearances
				.Where(c =>
					(c.Product.Description?.ToLower().Contains(storeSearchToLower) ?? false) ||
					(c.Product.SplitCategoryList?.Any(cat => cat.ToLower().Contains(storeSearchToLower)) ?? false) ||
					(c.Offer.Currency?.ToLower().Contains(storeSearchToLower) ?? false) ||
					c.Offer.Discount.ToString().Contains(storeSearchToLower) ||
					c.Offer.PercentDiscount.ToString().Contains(storeSearchToLower) ||
					c.Offer.OriginalPrice.ToString().Contains(storeSearchToLower) ||
					c.Offer.NewPrice.ToString().Contains(storeSearchToLower) ||
					c.Offer.StartTime.ToString().Contains(storeSearchToLower) ||
					c.Offer.EndTime.ToString().Contains(storeSearchToLower)
				)
				.ToList();
		}
	}
	private void OpenProductModal(Clearance product)
	{
		selectedProduct = product;
		isModalOpen = true;
	}


	private void CloseModal()
	{
		isModalOpen = false;
		selectedProduct = null;
	}
}