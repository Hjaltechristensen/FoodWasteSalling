@using FoodWasteSalling.Shared.Interfaces;
@using FoodWasteSalling.Shared.Models;
@page "/store/{storeId}"
@inject IOfferService OfferService
@inject NavigationManager Navigation


@if (store is null)
{
	<p>Loading...</p>
}
else
{
	<div class="store-header">
		<h2>@store?.Store?.Name</h2>
		<div class="store-address">
			<p><strong>By:</strong> @store?.Store?.Address?.City</p>
			<p><strong>Postnummer:</strong> @store?.Store?.Address?.Zip</p>
			<p><strong>Adresse:</strong> @store?.Store?.Address?.Street</p>
		</div>
	</div>

}

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	type="text"
	@bind="storeSearch"
	@bind:event="oninput" />
</div>

<div class="store-clearances">
	@foreach (var product in filteredProducts)
	{
		<button class="product-button" @onclick="() => ShowProductDetails(product.Product.Ean)">
			<div class="product-offer">
				<div class="product-info">
					<h3 class="product-title">@product?.Product?.Description</h3>
					<p class="original-price"><s>@product?.Offer?.OriginalPrice kr</s></p>
					<p class="new-price">@product?.Offer?.NewPrice kr</p>
					<p class="discount-amount">Spar @product?.Offer?.Discount kr (@product?.Offer?.PercentDiscount%)</p>
				</div>
				<div class="image-container">
					<img class="product-image"
					src="@product?.Product?.Image"
					alt="Product Image" />
				</div>
			</div>
		</button>


	}
</div>

@code {
	[Parameter] public string StoreId { get; set; } = null!;
	private EveryFoodWaste store = null!;
	private string currentUri = null!;

	private List<Clearance> filteredProducts = new List<Clearance>();

	protected override async Task OnInitializedAsync()
	{
		store = await OfferService.GetStoreByIdAsync(StoreId);
		filteredProducts = new List<Clearance>(store.Clearances);
		currentUri = Navigation.Uri;
	}

	private string _storeSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string storeSearch   //Bundet til input-feltet for søgning
	{
		get => _storeSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_storeSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			Console.WriteLine($"Søgestreng ændret til: {value}");
			FilterStores();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}

	private void ShowProductDetails(string ean)
	{
		var currentUri = Navigation.Uri;

		// Kod URL'en korrekt
		var encodedUri = Uri.EscapeDataString(currentUri);

		// Naviger til produktdetaljesiden med de nødvendige parametre
		Navigation.NavigateTo($"/productdetails/{ean}/{StoreId}/{encodedUri}");
	}


	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			filteredProducts = new List<Clearance>(store.Clearances);
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();
			filteredProducts =
			store.Clearances.Where(c => c.Product.Description.ToLower().Contains(storeSearchToLower) ||
			(c.Product.Categories.ToString().Contains(storeSearchToLower)) ||
			(c.Offer.Currency.ToLower().Contains(storeSearchToLower)) ||
			(c.Offer.Discount.ToString().Contains(storeSearchToLower)) ||
			(c.Offer.OriginalPrice.ToString().Contains(storeSearchToLower)) ||
			(c.Offer.NewPrice.ToString().Contains(storeSearchToLower)) ||
			(c.Offer.StartTime.ToString().Contains(storeSearchToLower)) ||
			(c.Offer.EndTime.ToString().Contains(storeSearchToLower))).ToList();
		}
	}

	private async Task ShowImage(Clearance item)
	{
		if (!item.IsImageVisible) // Kun hvis billedet ikke allerede er synligt
		{
			await Task.Delay(800);  // Vent i 2 sekunder før visning af billede
			item.IsImageVisible = true; // Gør billedet synligt
			StateHasChanged(); // Trigger en opdatering af UI
		}
	}

	private void HideImage(Clearance item)
	{
		item.IsImageVisible = false;
		StateHasChanged();  // Trigger a re-render
	}
}