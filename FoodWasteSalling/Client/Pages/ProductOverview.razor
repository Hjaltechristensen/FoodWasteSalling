@using FoodWasteSalling.Shared.Interfaces;
@using FoodWasteSalling.Shared.Models;
@inject IOfferService offerService
@inject NavigationManager Navigation

@page "/products"

<div class="zipcode-search">
	<label for="zipcode-input">Indtast postnummer</label>
	<div class="input-group">
		<input id="zipcode-input" type="number" placeholder="Postnummer" @bind-value="zipcode" />
		<button class="btn-search" @onclick="() => SearchOnZipcode(zipcode)">Søg</button>
	</div>
</div>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	type="text"
	@bind="storeSearch"
	@bind:event="oninput" />
</div>

<div class="sort-buttons-container">
	<span>Sortér efter:</span>
	<button class="sort-button @(selectedSort == "name" ? "active-sort" : "")" @onclick="@(() => SetSort("name"))">Navn (A-Å)</button>
	<button class="sort-button @(selectedSort == "priceAsc" ? "active-sort" : "")" @onclick="@(() => SetSort("priceAsc"))">Pris ↑</button>
	<button class="sort-button @(selectedSort == "priceDesc" ? "active-sort" : "")" @onclick="@(() => SetSort("priceDesc"))">Pris ↓</button>
	<button class="sort-button @(selectedSort == "discount" ? "active-sort" : "")" @onclick="@(() => SetSort("discount"))">Største rabat</button>
	<button class="sort-button @(selectedSort == "discountPercent" ? "active-sort" : "")" @onclick="@(() => SetSort("discountPercent"))">Største rabat %</button>
</div>

<div class="store-clearances">
	@foreach (var product in filteredProducts)
	{
		var store = allStores.FirstOrDefault(s => s.Clearances.Any(c => c.Product?.Ean == product?.Product?.Ean))?.Store;
		if (store != null)
		{
			<button class="product-button" @onclick="() => ShowProductDetails(product.Product.Ean, store.Id)">
				<div class="product-offer">
					<div class="product-info">
						<h3 class="product-title">@product?.Product?.Description</h3>
						<p class="original-price"><s>@product?.Offer?.OriginalPrice kr</s></p>
						<p class="new-price">@product?.Offer?.NewPrice kr</p>
						<p class="discount-amount">Spar @product?.Offer?.Discount kr (@product?.Offer?.PercentDiscount%)</p>
					</div>
					<div class="image-container">
						<img class="product-image"
						src="@((product?.Product?.Image != null) ? product?.Product?.Image : "noimage.png")"
						alt="Product Image" />
					</div>
				</div>
			</button>
		}
	}
</div>

@code {
	private List<EveryFoodWaste> allStores = new();
	private List<Clearance> filteredProducts = new();
	private List<Product> processedProducts = new();
	private int zipcode = 8000;
	private string? currentUri;

	private string selectedSort = "name";

	private async Task SearchOnZipcode(int zipcode)
	{
		allStores = await offerService.GetStoresAsync(zipcode);
		foreach (var store in allStores)
		{
			filteredProducts.AddRange(store.Clearances);
		}
	}

	private string _storeSearch;
	private string storeSearch
	{
		get => _storeSearch;
		set
		{
			_storeSearch = value;
			FilterStores();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await SearchOnZipcode(zipcode);
		currentUri = Navigation.Uri;

		foreach (var store in allStores)
		{
			foreach (var clearance in store.Clearances)
			{
				clearance?.Product?.SplitCategories();
			}
		}
		filteredProducts = allStores.SelectMany(s => s.Clearances).ToList();
		SortFilteredProducts();
	}

	private void SetSort(string sortType)
	{
		selectedSort = sortType;
		SortFilteredProducts();
	}

	private void SortFilteredProducts()
	{
		switch (selectedSort)
		{
			case "name":
				filteredProducts = filteredProducts
					.OrderBy(p => p?.Product?.Description)
					.ToList();
				break;
			case "priceAsc":
				filteredProducts = filteredProducts
					.OrderBy(p => p?.Offer?.NewPrice)
					.ToList();
				break;
			case "priceDesc":
				filteredProducts = filteredProducts
					.OrderByDescending(p => p?.Offer?.NewPrice)
					.ToList();
				break;
			case "discountPercent":
				filteredProducts = filteredProducts
					.OrderByDescending(p => p?.Offer?.PercentDiscount)
					.ToList();
				break;
			case "discount":
				filteredProducts = filteredProducts.OrderByDescending(p => p?.Offer?.Discount)
				.ToList();
				break;
		}
	}

	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			foreach (var store in allStores)
			{
				filteredProducts.AddRange(store.Clearances);
			}
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();

			filteredProducts = allStores.SelectMany(s => s.Clearances.Select
			(c => new { c, s.Store })).Where(x =>
			(x.c.Product.Description?.ToLower().Contains(storeSearchToLower) ?? false) ||
			(x.c.Product.SplitCategoryList?.Any(cat => cat.ToLower().Contains(storeSearchToLower)) ?? false) ||
			(x.c.Offer.Currency?.ToLower().Contains(storeSearchToLower) ?? false) ||
			(x.c.Offer.Discount.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.PercentDiscount.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.OriginalPrice.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.NewPrice.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.StartTime.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.EndTime.ToString().Contains(storeSearchToLower)))
			.Select(x => x.c)
			.ToList();
		}
	}

	private void ShowProductDetails(string ean, string storeId)
	{
		var currentUri = Navigation.Uri;
		var encodedUri = Uri.EscapeDataString(currentUri);
		Navigation.NavigateTo($"/productdetails/{ean}/{storeId}/{encodedUri}");
	}
}
