@using FoodWasteSalling.Shared.Interfaces;
@using FoodWasteSalling.Shared.Models;
@inject IOfferService offerService
@inject NavigationManager Navigation

@page "/products"



<div class="zipcode-search">
	<label for="zipcode-input">Indtast postnummer</label>
	<div class="input-group">
		<input id="zipcode-input" type="number" placeholder="Postnummer" @bind-value="zipcode" />
		<button class="btn-search" @onclick="() => SearchOnZipcode(zipcode)">Søg</button>
	</div>
</div>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	type="text"
	@bind="storeSearch"
	@bind:event="oninput" />
</div>

<div class="store-clearances">
	@foreach (var product in filteredProducts)
	{
		var store = allStores.FirstOrDefault(s => s.Clearances.Any(c => c.Product?.Ean == product?.Product?.Ean))?.Store;
		if (store != null)
		{
			<button class="product-button" @onclick="() => ShowProductDetails(product.Product.Ean, store.Id)">
				<div class="product-offer">
					<div class="product-info">
						<h3 class="product-title">@product?.Product?.Description</h3>
						<p class="original-price"><s>@product?.Offer?.OriginalPrice kr</s></p>
						<p class="new-price">@product?.Offer?.NewPrice kr</p>
						<p class="discount-amount">Spar @product?.Offer?.Discount kr (@product?.Offer?.PercentDiscount%)</p>
					</div>
					<div class="image-container">
						<img class="product-image"
						src="@product?.Product?.Image"
						alt="Product Image" />
					</div>
				</div>
			</button>
		}
	}

</div>

@code {
	// private EveryFoodWaste store;
	private List<EveryFoodWaste> allStores = new List<EveryFoodWaste>(); // Liste til at gemme butikkerne
	private List<Clearance> filteredProducts = new List<Clearance>();
	private int zipcode = 8000;
	private string? currentUri;

	private async Task SearchOnZipcode(int zipcode)
	{
		allStores = await offerService.GetStoresAsync(zipcode);
		foreach (var store in allStores)
		{
			filteredProducts.AddRange(store.Clearances);
		}
	}

	private string _storeSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string storeSearch   //Bundet til input-feltet for søgning
	{
		get => _storeSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_storeSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			Console.WriteLine($"Søgestreng ændret til: {value}");
			FilterStores();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await SearchOnZipcode(zipcode);
		currentUri = Navigation.Uri;
	}


	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			foreach (var store in allStores)
			{
				filteredProducts.AddRange(store.Clearances);
			}
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();

			filteredProducts = allStores.SelectMany(s => s.Clearances.Select
			(c => new { c, s.Store })).Where(x =>
			(x.c.Product.Description?.ToLower().Contains(storeSearchToLower) ?? false) ||
			(x.c.Product.Categories?.ToString().ToLower().Contains(storeSearchToLower) ?? false) ||
			(x.c.Offer.Currency?.ToLower().Contains(storeSearchToLower) ?? false) ||
			(x.c.Offer.Discount.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.OriginalPrice.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.NewPrice.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.StartTime.ToString().Contains(storeSearchToLower)) ||
			(x.c.Offer.EndTime.ToString().Contains(storeSearchToLower)))
			.Select(x => x.c)
			.ToList();
		}
	}


	private void ShowProductDetails(string ean, string storeId)
	{
		var currentUri = Navigation.Uri;

		// Kod URL'en korrekt
		var encodedUri = Uri.EscapeDataString(currentUri);

		// Naviger til produktdetaljesiden med de nødvendige parametre
		Navigation.NavigateTo($"/productdetails/{ean}/{storeId}/{encodedUri}");
	}
}
