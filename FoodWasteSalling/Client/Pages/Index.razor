@using FoodWasteSalling.Shared.Models;
@using FoodWasteSalling.Shared.Interfaces;

@page "/stores"

<div class="zipcode-search">
	<label for="zipcode-input">Indtast postnummer</label>
	<div class="input-group">
		<input id="zipcode-input"
			   type="number"
			   placeholder="Postnummer"
			   @bind="zipcode"
			   @bind:event="oninput"
			   @onkeydown="HandleKeyDown" />
		<button class="btn-search" @onclick="() => SearchOnZipcode(zipcode)">Søg</button>
	</div>
</div>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
		   placeholder="Søg"
		   type="text"
		   @bind="storeSearch"
		   @bind:event="oninput" />
</div>

@if (filteredStores == null)
{
	<p class="no-results"><em>Ingen butikker fundet.</em></p>
}
else
{
	<div class="store-list">
		@foreach (var store in filteredStores)
		{
			<button class="store-card" @onclick="() => ShowStoreDetails(store.Store.Id)">
				<h4>@store?.Store?.Name</h4>
			</button>
		}
	</div>

	@if (selectedStore != null)
	{
		<div class="store-details">
			<h3>@selectedStore?.Store?.Name</h3>
			<p><strong>Brand:</strong> @selectedStore?.Store?.Brand</p>
			<p><strong>Adresse:</strong> @selectedStore?.Store?.Address</p>
		</div>
	}
}

@code {

	[Inject]
	IOfferService OfferService { get; set; } = null!;
	[Inject]
	private NavigationManager Navigation { get; set; } = null!;
	private EveryFoodWaste? selectedStore;
	private List<EveryFoodWaste> everyThing = new List<EveryFoodWaste>();
	private List<EveryFoodWaste> filteredStores = new List<EveryFoodWaste>();
	private int zipcode = 8000;

	private string _storeSearch;
	private string storeSearch
	{
		get => _storeSearch;
		set
		{
			_storeSearch = value;
			FilterStores();
		}
	}

	private void ShowStoreDetails(string storeId)
	{
		Navigation.NavigateTo($"/store/{storeId}");
	}

	protected override async Task OnInitializedAsync()
	{
		await SearchOnZipcode(zipcode);
	}

	private async Task SearchOnZipcode(int zipcode)
	{
		filteredStores = await OfferService.GetStoresAsync(zipcode);
	}

	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			filteredStores = new List<EveryFoodWaste>(everyThing);
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();
			filteredStores =
			everyThing.Where(c => c.Store.Name.ToLower().Contains(storeSearchToLower) ||
			(c.Store.Brand.ToLower().Contains(storeSearchToLower))).ToList();
		}
	}
	private async void HandleKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await SearchOnZipcode(zipcode);
		}
	}
}