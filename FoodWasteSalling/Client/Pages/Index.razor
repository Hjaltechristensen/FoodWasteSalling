@inject IOfferService OfferService
@inject IDAWAService DAWAService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@page "/stores"
@using FoodWasteSalling.Shared.Interfaces
@using FoodWasteSalling.Shared.Models

<div class="zipcode-search">
	<label for="zipcode-input">Indtast postnummer</label>
	<div class="input-group">
		<input id="zipcode-input"
			   type="number"
			   placeholder="Postnummer"
			   @bind="zipcode"
			   @bind:event="oninput"
			   @onkeydown="HandleKeyDown" />
		<button class="btn-search" @onclick="() => SearchOnZipcode(zipcode)">Søg</button>
		<button class="position" @onclick="FindPosition">📍</button>
	</div>
</div>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
		   placeholder="Søg"
		   type="text"
		   @bind="storeSearch"
		   @bind:event="oninput" />
</div>

@if (isStoreLoading)
{
	<div class="store-list">
		@for (int i = 0; i < 12; i++)
		{
			<div class="skeleton-store-card skeleton"></div>
		}
	</div>
}
else if (filteredStores == null || !filteredStores.Any())
{
	<p class="no-results"><em>Ingen butikker fundet.</em></p>
}
else
{
	<div class="store-list">
		@foreach (var store in filteredStores)
		{
			<button class="store-card" @onclick="() => ShowStoreDetails(store.Store.Id)">
				<h4>@store?.Store?.Name</h4>
			</button>
		}
	</div>
}



@code {
	private List<EveryFoodWaste> everyThing = new List<EveryFoodWaste>();
	private List<EveryFoodWaste> filteredStores = new List<EveryFoodWaste>();
	private int zipcode = 8000;
	private bool isStoreLoading = true;

	private string _storeSearch;
	private string storeSearch
	{
		get => _storeSearch;
		set
		{
			_storeSearch = value;
			FilterStores();
		}
	}

	private void ShowStoreDetails(string storeId)
	{
		NavManager.NavigateTo($"/store/{storeId}");
	}

	protected override async Task OnInitializedAsync()
	{
		isStoreLoading = true;
		await SearchOnZipcode(zipcode);
		isStoreLoading = false;
	}

	private async Task SearchOnZipcode(int zipcode)
	{
		filteredStores = await OfferService.GetStoresAsync(zipcode);
	}

	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			filteredStores = new List<EveryFoodWaste>(everyThing);
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();
			filteredStores =
			everyThing.Where(c => c.Store.Name.ToLower().Contains(storeSearchToLower) ||
			(c.Store.Brand.ToLower().Contains(storeSearchToLower))).ToList();
		}
	}
	private async void HandleKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await SearchOnZipcode(zipcode);
		}
	}

	private async Task FindPosition()
	{
		try
		{
			var coords = await JS.InvokeAsync<GeoLocation>("getCurrentLocation");
			var notZip = await DAWAService.GetDAWAZipAsync(coords.Longitude, coords.Latitude);
			if (int.TryParse(notZip, out int zip))
			{
				zipcode = zip;
			}
		}
		catch (Exception ex)
		{
			throw new Exception("Fejl ved hentning af position: " + ex.Message);
		}
	}
}