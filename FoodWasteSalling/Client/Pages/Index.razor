@using FoodWasteSalling.Shared.Models;
@using FoodWasteSalling.Shared.Interfaces;
@page "/stores"

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	type="text"
	@bind="storeSearch"
	@bind:event="oninput"/>
</div>

<div class="zipcode-search">
	<label for="zipcode-input">Indtast postnummer</label>
	<div class="input-group">
		<input id="zipcode-input" type="number" placeholder="Postnummer" @bind-value="zipcode" />
		<button class="btn-search" @onclick="() => SearchOnZipcode(zipcode)">Søg</button>
	</div>
</div>

@if (filteredStores == null)
{
	<p class="no-results"><em>Ingen butikker fundet.</em></p>
}
else
{
	<div class="store-list">
		@foreach (var store in filteredStores)
		{
			<button class="store-card" @onclick="() => ShowStoreDetails(store.Store.Id)">
				<h4>@store.Store.Name</h4>
			</button>
		}
	</div>

	@if (selectedStore != null)
	{
		<div class="store-details">
			<h3>@selectedStore.Store.Name</h3>
			<p><strong>Brand:</strong> @selectedStore.Store.Brand</p>
			<p><strong>Adresse:</strong> @selectedStore.Store.Address</p>
		</div>
	}
}




@code {

	[Inject] 
	IOfferService OfferService { get; set; } = null!;
	[Inject] 
	private NavigationManager Navigation { get; set; } = null!;
	private EveryFoodWaste? selectedStore;
	private List<EveryFoodWaste> everyThing = new List<EveryFoodWaste>();
	private List<EveryFoodWaste> filteredStores = new List<EveryFoodWaste>();
	private int zipcode = 8000;

	private string _storeSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string storeSearch   //Bundet til input-feltet for søgning
	{
		get => _storeSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_storeSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			Console.WriteLine($"Søgestreng ændret til: {value}");
			FilterStores();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}

	private void ShowStoreDetails(string storeId)
	{
		Navigation.NavigateTo($"/store/{storeId}");
	}

	protected override async Task OnInitializedAsync()
	{
		await SearchOnZipcode(zipcode);
	}

	private async Task SearchOnZipcode(int zipcode)
	{
		everyThing = await OfferService.GetStoresAsync(zipcode);
		filteredStores = everyThing;
	}

	private void FilterStores()
	{
		if (string.IsNullOrWhiteSpace(storeSearch))
		{
			filteredStores = new List<EveryFoodWaste>(everyThing);
		}
		else
		{
			var storeSearchToLower = storeSearch.ToLower();
			filteredStores =
			everyThing.Where(c => c.Store.Name.ToLower().Contains(storeSearchToLower) ||
			(c.Store.Brand.ToLower().Contains(storeSearchToLower))).ToList();
		}
	}
}